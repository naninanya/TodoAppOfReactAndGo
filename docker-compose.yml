version: "3"

services:
  db:
    container_name: myPostgres
    restart: always
    image: postgres:13-alpine
    hostname: dbServer
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    tty: true
    networks:
      mynetwork:
        ipv4_address: 192.168.200.2
    ports:
      - 5432:5432
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d/

  backend:
    container_name: myEcho
    restart: always
    hostname: backendServer
    build: ./echo
    command: go run /go/src/echo/server.go
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    tty: true
    ports: 
      - 1323:1323
    networks:
      mynetwork:
        ipv4_address: 192.168.200.3
    depends_on:
      - db
  
  frontend:
    container_name: myReact
    hostname: frontendServer
    build: ./client-app
    command: npm start
    tty: true
    ports:
      - 3000:3000
    networks:
      mynetwork:
        ipv4_address: 192.168.200.4
    depends_on:
      - backend
  
  web:
    container_name: myNginx
    hostname: webServer
    build: ./nginx
    tty: true
    ports: 
      - 1234:1234
    networks:
      mynetwork:
        ipv4_address: 192.168.200.5
    depends_on:
      - backend
      - frontend

networks:
  mynetwork:
     driver: bridge
     ipam:
        driver: default
        config:
          - subnet: 192.168.200.0/24
            gateway: 192.168.200.1
